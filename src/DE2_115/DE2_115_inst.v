// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 21.1 (Build Build 850 06/23/2022)
// Created on Fri Jun 16 14:42:01 2023

DE2_115 DE2_115_inst
(
	.CLOCK_50(CLOCK_50_sig) ,	// input  CLOCK_50_sig
	.CLOCK2_50(CLOCK2_50_sig) ,	// input  CLOCK2_50_sig
	.CLOCK3_50(CLOCK3_50_sig) ,	// input  CLOCK3_50_sig
	.SMA_CLKIN(SMA_CLKIN_sig) ,	// input  SMA_CLKIN_sig
	.SMA_CLKOUT(SMA_CLKOUT_sig) ,	// output  SMA_CLKOUT_sig
	.LEDG(LEDG_sig) ,	// output [8:0] LEDG_sig
	.LEDR(LEDR_sig) ,	// output [17:0] LEDR_sig
	.KEY(KEY_sig) ,	// input [3:0] KEY_sig
	.EX_IO(EX_IO_sig) ,	// inout [6:0] EX_IO_sig
	.SW(SW_sig) ,	// input [17:0] SW_sig
	.HEX0(HEX0_sig) ,	// output [6:0] HEX0_sig
	.HEX1(HEX1_sig) ,	// output [6:0] HEX1_sig
	.HEX2(HEX2_sig) ,	// output [6:0] HEX2_sig
	.HEX3(HEX3_sig) ,	// output [6:0] HEX3_sig
	.HEX4(HEX4_sig) ,	// output [6:0] HEX4_sig
	.HEX5(HEX5_sig) ,	// output [6:0] HEX5_sig
	.HEX6(HEX6_sig) ,	// output [6:0] HEX6_sig
	.HEX7(HEX7_sig) ,	// output [6:0] HEX7_sig
	.LCD_BLON(LCD_BLON_sig) ,	// output  LCD_BLON_sig
	.LCD_DATA(LCD_DATA_sig) ,	// inout [7:0] LCD_DATA_sig
	.LCD_EN(LCD_EN_sig) ,	// output  LCD_EN_sig
	.LCD_ON(LCD_ON_sig) ,	// output  LCD_ON_sig
	.LCD_RS(LCD_RS_sig) ,	// output  LCD_RS_sig
	.LCD_RW(LCD_RW_sig) ,	// output  LCD_RW_sig
	.UART_CTS(UART_CTS_sig) ,	// output  UART_CTS_sig
	.UART_RTS(UART_RTS_sig) ,	// input  UART_RTS_sig
	.UART_RXD(UART_RXD_sig) ,	// input  UART_RXD_sig
	.UART_TXD(UART_TXD_sig) ,	// output  UART_TXD_sig
	.PS2_CLK(PS2_CLK_sig) ,	// inout  PS2_CLK_sig
	.PS2_CLK2(PS2_CLK2_sig) ,	// inout  PS2_CLK2_sig
	.PS2_DAT(PS2_DAT_sig) ,	// inout  PS2_DAT_sig
	.PS2_DAT2(PS2_DAT2_sig) ,	// inout  PS2_DAT2_sig
	.SD_CLK(SD_CLK_sig) ,	// output  SD_CLK_sig
	.SD_CMD(SD_CMD_sig) ,	// inout  SD_CMD_sig
	.SD_DAT(SD_DAT_sig) ,	// inout [3:0] SD_DAT_sig
	.SD_WP_N(SD_WP_N_sig) ,	// input  SD_WP_N_sig
	.VGA_B(VGA_B_sig) ,	// output [7:0] VGA_B_sig
	.VGA_BLANK_N(VGA_BLANK_N_sig) ,	// output  VGA_BLANK_N_sig
	.VGA_CLK(VGA_CLK_sig) ,	// output  VGA_CLK_sig
	.VGA_G(VGA_G_sig) ,	// output [7:0] VGA_G_sig
	.VGA_HS(VGA_HS_sig) ,	// output  VGA_HS_sig
	.VGA_R(VGA_R_sig) ,	// output [7:0] VGA_R_sig
	.VGA_SYNC_N(VGA_SYNC_N_sig) ,	// output  VGA_SYNC_N_sig
	.VGA_VS(VGA_VS_sig) ,	// output  VGA_VS_sig
	.AUD_ADCDAT(AUD_ADCDAT_sig) ,	// input  AUD_ADCDAT_sig
	.AUD_ADCLRCK(AUD_ADCLRCK_sig) ,	// inout  AUD_ADCLRCK_sig
	.AUD_BCLK(AUD_BCLK_sig) ,	// inout  AUD_BCLK_sig
	.AUD_DACDAT(AUD_DACDAT_sig) ,	// output  AUD_DACDAT_sig
	.AUD_DACLRCK(AUD_DACLRCK_sig) ,	// inout  AUD_DACLRCK_sig
	.AUD_XCK(AUD_XCK_sig) ,	// output  AUD_XCK_sig
	.EEP_I2C_SCLK(EEP_I2C_SCLK_sig) ,	// output  EEP_I2C_SCLK_sig
	.EEP_I2C_SDAT(EEP_I2C_SDAT_sig) ,	// inout  EEP_I2C_SDAT_sig
	.I2C_SCLK(I2C_SCLK_sig) ,	// output  I2C_SCLK_sig
	.I2C_SDAT(I2C_SDAT_sig) ,	// inout  I2C_SDAT_sig
	.ENET0_GTX_CLK(ENET0_GTX_CLK_sig) ,	// output  ENET0_GTX_CLK_sig
	.ENET0_INT_N(ENET0_INT_N_sig) ,	// input  ENET0_INT_N_sig
	.ENET0_LINK100(ENET0_LINK100_sig) ,	// input  ENET0_LINK100_sig
	.ENET0_MDC(ENET0_MDC_sig) ,	// output  ENET0_MDC_sig
	.ENET0_MDIO(ENET0_MDIO_sig) ,	// inout  ENET0_MDIO_sig
	.ENET0_RST_N(ENET0_RST_N_sig) ,	// output  ENET0_RST_N_sig
	.ENET0_RX_CLK(ENET0_RX_CLK_sig) ,	// input  ENET0_RX_CLK_sig
	.ENET0_RX_COL(ENET0_RX_COL_sig) ,	// input  ENET0_RX_COL_sig
	.ENET0_RX_CRS(ENET0_RX_CRS_sig) ,	// input  ENET0_RX_CRS_sig
	.ENET0_RX_DATA(ENET0_RX_DATA_sig) ,	// input [3:0] ENET0_RX_DATA_sig
	.ENET0_RX_DV(ENET0_RX_DV_sig) ,	// input  ENET0_RX_DV_sig
	.ENET0_RX_ER(ENET0_RX_ER_sig) ,	// input  ENET0_RX_ER_sig
	.ENET0_TX_CLK(ENET0_TX_CLK_sig) ,	// input  ENET0_TX_CLK_sig
	.ENET0_TX_DATA(ENET0_TX_DATA_sig) ,	// output [3:0] ENET0_TX_DATA_sig
	.ENET0_TX_EN(ENET0_TX_EN_sig) ,	// output  ENET0_TX_EN_sig
	.ENET0_TX_ER(ENET0_TX_ER_sig) ,	// output  ENET0_TX_ER_sig
	.ENETCLK_25(ENETCLK_25_sig) ,	// input  ENETCLK_25_sig
	.ENET1_GTX_CLK(ENET1_GTX_CLK_sig) ,	// output  ENET1_GTX_CLK_sig
	.ENET1_INT_N(ENET1_INT_N_sig) ,	// input  ENET1_INT_N_sig
	.ENET1_LINK100(ENET1_LINK100_sig) ,	// input  ENET1_LINK100_sig
	.ENET1_MDC(ENET1_MDC_sig) ,	// output  ENET1_MDC_sig
	.ENET1_MDIO(ENET1_MDIO_sig) ,	// inout  ENET1_MDIO_sig
	.ENET1_RST_N(ENET1_RST_N_sig) ,	// output  ENET1_RST_N_sig
	.ENET1_RX_CLK(ENET1_RX_CLK_sig) ,	// input  ENET1_RX_CLK_sig
	.ENET1_RX_COL(ENET1_RX_COL_sig) ,	// input  ENET1_RX_COL_sig
	.ENET1_RX_CRS(ENET1_RX_CRS_sig) ,	// input  ENET1_RX_CRS_sig
	.ENET1_RX_DATA(ENET1_RX_DATA_sig) ,	// input [3:0] ENET1_RX_DATA_sig
	.ENET1_RX_DV(ENET1_RX_DV_sig) ,	// input  ENET1_RX_DV_sig
	.ENET1_RX_ER(ENET1_RX_ER_sig) ,	// input  ENET1_RX_ER_sig
	.ENET1_TX_CLK(ENET1_TX_CLK_sig) ,	// input  ENET1_TX_CLK_sig
	.ENET1_TX_DATA(ENET1_TX_DATA_sig) ,	// output [3:0] ENET1_TX_DATA_sig
	.ENET1_TX_EN(ENET1_TX_EN_sig) ,	// output  ENET1_TX_EN_sig
	.ENET1_TX_ER(ENET1_TX_ER_sig) ,	// output  ENET1_TX_ER_sig
	.TD_CLK27(TD_CLK27_sig) ,	// input  TD_CLK27_sig
	.TD_DATA(TD_DATA_sig) ,	// input [7:0] TD_DATA_sig
	.TD_HS(TD_HS_sig) ,	// input  TD_HS_sig
	.TD_RESET_N(TD_RESET_N_sig) ,	// output  TD_RESET_N_sig
	.TD_VS(TD_VS_sig) ,	// input  TD_VS_sig
	.OTG_ADDR(OTG_ADDR_sig) ,	// output [1:0] OTG_ADDR_sig
	.OTG_CS_N(OTG_CS_N_sig) ,	// output  OTG_CS_N_sig
	.OTG_DACK_N(OTG_DACK_N_sig) ,	// output [1:0] OTG_DACK_N_sig
	.OTG_DATA(OTG_DATA_sig) ,	// inout [15:0] OTG_DATA_sig
	.OTG_DREQ(OTG_DREQ_sig) ,	// input [1:0] OTG_DREQ_sig
	.OTG_FSPEED(OTG_FSPEED_sig) ,	// inout  OTG_FSPEED_sig
	.OTG_INT(OTG_INT_sig) ,	// input [1:0] OTG_INT_sig
	.OTG_LSPEED(OTG_LSPEED_sig) ,	// inout  OTG_LSPEED_sig
	.OTG_RD_N(OTG_RD_N_sig) ,	// output  OTG_RD_N_sig
	.OTG_RST_N(OTG_RST_N_sig) ,	// output  OTG_RST_N_sig
	.OTG_WE_N(OTG_WE_N_sig) ,	// output  OTG_WE_N_sig
	.IRDA_RXD(IRDA_RXD_sig) ,	// input  IRDA_RXD_sig
	.DRAM_ADDR(DRAM_ADDR_sig) ,	// output [12:0] DRAM_ADDR_sig
	.DRAM_BA(DRAM_BA_sig) ,	// output [1:0] DRAM_BA_sig
	.DRAM_CAS_N(DRAM_CAS_N_sig) ,	// output  DRAM_CAS_N_sig
	.DRAM_CKE(DRAM_CKE_sig) ,	// output  DRAM_CKE_sig
	.DRAM_CLK(DRAM_CLK_sig) ,	// output  DRAM_CLK_sig
	.DRAM_CS_N(DRAM_CS_N_sig) ,	// output  DRAM_CS_N_sig
	.DRAM_DQ(DRAM_DQ_sig) ,	// inout [31:0] DRAM_DQ_sig
	.DRAM_DQM(DRAM_DQM_sig) ,	// output [3:0] DRAM_DQM_sig
	.DRAM_RAS_N(DRAM_RAS_N_sig) ,	// output  DRAM_RAS_N_sig
	.DRAM_WE_N(DRAM_WE_N_sig) ,	// output  DRAM_WE_N_sig
	.SRAM_ADDR(SRAM_ADDR_sig) ,	// output [19:0] SRAM_ADDR_sig
	.SRAM_CE_N(SRAM_CE_N_sig) ,	// output  SRAM_CE_N_sig
	.SRAM_DQ(SRAM_DQ_sig) ,	// inout [15:0] SRAM_DQ_sig
	.SRAM_LB_N(SRAM_LB_N_sig) ,	// output  SRAM_LB_N_sig
	.SRAM_OE_N(SRAM_OE_N_sig) ,	// output  SRAM_OE_N_sig
	.SRAM_UB_N(SRAM_UB_N_sig) ,	// output  SRAM_UB_N_sig
	.SRAM_WE_N(SRAM_WE_N_sig) ,	// output  SRAM_WE_N_sig
	.FL_ADDR(FL_ADDR_sig) ,	// output [22:0] FL_ADDR_sig
	.FL_CE_N(FL_CE_N_sig) ,	// output  FL_CE_N_sig
	.FL_DQ(FL_DQ_sig) ,	// inout [7:0] FL_DQ_sig
	.FL_OE_N(FL_OE_N_sig) ,	// output  FL_OE_N_sig
	.FL_RST_N(FL_RST_N_sig) ,	// output  FL_RST_N_sig
	.FL_RY(FL_RY_sig) ,	// input  FL_RY_sig
	.FL_WE_N(FL_WE_N_sig) ,	// output  FL_WE_N_sig
	.FL_WP_N(FL_WP_N_sig) ,	// output  FL_WP_N_sig
	.GPIO(GPIO_sig) ,	// inout [35:0] GPIO_sig
	.HSMC_CLKIN_N1(HSMC_CLKIN_N1_sig) ,	// input  HSMC_CLKIN_N1_sig
	.HSMC_CLKIN_N2(HSMC_CLKIN_N2_sig) ,	// input  HSMC_CLKIN_N2_sig
	.HSMC_CLKIN_P1(HSMC_CLKIN_P1_sig) ,	// input  HSMC_CLKIN_P1_sig
	.HSMC_CLKIN_P2(HSMC_CLKIN_P2_sig) ,	// input  HSMC_CLKIN_P2_sig
	.HSMC_CLKIN0(HSMC_CLKIN0_sig) ,	// input  HSMC_CLKIN0_sig
	.HSMC_CLKOUT_N1(HSMC_CLKOUT_N1_sig) ,	// output  HSMC_CLKOUT_N1_sig
	.HSMC_CLKOUT_N2(HSMC_CLKOUT_N2_sig) ,	// output  HSMC_CLKOUT_N2_sig
	.HSMC_CLKOUT_P1(HSMC_CLKOUT_P1_sig) ,	// output  HSMC_CLKOUT_P1_sig
	.HSMC_CLKOUT_P2(HSMC_CLKOUT_P2_sig) ,	// output  HSMC_CLKOUT_P2_sig
	.HSMC_CLKOUT0(HSMC_CLKOUT0_sig) ,	// output  HSMC_CLKOUT0_sig
	.HSMC_D(HSMC_D_sig) ,	// inout [3:0] HSMC_D_sig
	.HSMC_RX_D_N(HSMC_RX_D_N_sig) ,	// inout [16:0] HSMC_RX_D_N_sig
	.HSMC_RX_D_P(HSMC_RX_D_P_sig) ,	// inout [16:0] HSMC_RX_D_P_sig
	.HSMC_TX_D_N(HSMC_TX_D_N_sig) ,	// inout [16:0] HSMC_TX_D_N_sig
	.HSMC_TX_D_P(HSMC_TX_D_P_sig) 	// inout [16:0] HSMC_TX_D_P_sig
);

